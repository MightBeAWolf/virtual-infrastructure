#!/bin/bash
# Silicon Technologies Inc. CONFIDENTIAL
# Unpublished Copyright (c) 2023 Silicon Technologies Inc., All Rights Reserved.
#
# NOTICE:  All information contained herein is, and remains the property of Silicon
# Technologies Inc. The intellectual and technical concepts contained
# herein are proprietary to Silicon Technologies Inc. and may be covered by U.S. and
# Foreign Patents, patents in process, and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material is strictly forbidden
# unless prior written permission is obtained from Silicon Technologies Inc.  Access to the
# source code contained herein is hereby forbidden to anyone except current Silicon Technologies
# Inc. employees, managers or contractors who have executed Confidentiality andNon-disclosure
# agreements explicitly covering such access.
#
# The copyright notice above does not evidence any actual or intended publication or disclosure
# of this source code, which includes information that is confidential and/or proprietary,
# and is a trade secret, of  Silicon Technologies Inc.   ANY REPRODUCTION, MODIFICATION,
# DISTRIBUTION, PUBLIC  PERFORMANCE, OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE
# CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED, AND IN
# VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION
# OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS TO
# REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING
# THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
###############################################################################################
# SCRIPT GLOSSARY
# A Set Default Options
# B Utility Functions
# C Validate Inputs
# D Execute Operations
###############################################################################################
###############################################################################################
################################# A Set IMPORTANT Options #####################################
###############################################################################################
### Configure the Restic options
# Define where our backup will be stored
REMOTE_REPO_NAME='{{ services_gitea_backup_kit.name }}'
REPOSITORY="{{ services_gitea_backup_kit.server }}:data/${REMOTE_REPO_NAME:?}"


# Define a delay specifying how long  the process should wait after the pre/post
# processing before continuing.
POST_START_DELAY=5
POST_STOP_DELAY=15


SOURCE_PATH="/opt/gitea/dump"

# Uncomment to only execute a dry run (Don't actually backup)
# DRY_RUN=('--dry-run')

# Array of exclusion patterns
EXCLUDE_POLICIES=(
  "--exclude=data/conf/*"
)

# Retention policy arguments for 'restic forget'
# It should be noted that while this policy defines the retention time period,
# the act of backing up is defined by the systemd timer kicking off the backup
# service. If it is found that the retention policy seemingly isn't being
# followed, one  explanation is that the time required for a backup is longer
# than either the  retention policy or the frequency timer. For example, If we
# find that the hourly retention is only mainting a snapshot for every other
# hour then it is a good chance that the backup itself is taking >1 hour.
# The default policy is to keep: 
# - hourly snapshots for the last 12 hours
# - daily snapshots for the last week
# - weekly for the last three months
# - monthly for the last year 
# - yearly for the last 7 years,
RETENTION_POLICY=(
  "--keep-within-hourly"  "12h"
  "--keep-within-daily"   "7d"
  "--keep-within-weekly"  "3m"
  "--keep-within-monthly" "1y"
  "--keep-within-yearly"  "7y"
)

# Add any additional resitic arguments to this array
# See https://restic.readthedocs.io/en/stable/047_tuning_backup_parameters.html
ADDITIONAL_BACKUP_ARGS=(
  # Remove overhead in exchange for no progress estimation
  # "--no-scan" 

  # When backuping up from fast storage mediums, like NVMe, adding read
  # concurrency will allow for reading more than one file at a time. This
  # should not be used when you dont know the storage medium, or your reading
  # from a hard disk.
  # "--read-concurrency" "5" # 

  # For backups larger than 2 TiB it can be performant to increase the 
  # packet size, though this comes at the cost of larger and more frequent
  # temporary files used during the backup. Defaults to 16 MiB
  # "--pack-size" "32M"
  # "--pack-size" "64M"
)

###
# Secret references
OP_REFERENCE_REPO_PASSWORD="op://Backups/Onsite Restic/password"
OP_REFERENCE_SSH_PASSPHRASE="op://Backups/Onsite Backupsys SSH Passphrase/password"
# Path info
KIT_DIR="$(realpath "${BASH_SOURCE[0]}" | xargs -I{} dirname {})"

pre_backup_processing(){
  sudo -n podman commit gitea gitea-dump
  sudo -n systemctl stop gitea-podman.service
  sudo -n -u git mkdir -p /opt/gitea/dump
  sudo -n podman run --rm --pod=gitea-pod -u git --env=USER_UID={{ git_user.uid }} --env=USER_GID={{ git_user.group }}{% for src, dst in services_gitea_volumes.gitea.items() %} -v {{src}}:{{dst}}{% endfor %} localhost/gitea-dump /usr/local/bin/gitea dump -f /data/dump/dump.zip
  sudo -n -u git unzip -d /opt/gitea/dump /opt/gitea/dump/dump.zip
  sudo -n -u git rm /opt/gitea/dump/dump.zip
}

# Enable the vm to start back up after the backup
start_the_container(){
  sudo -n systemctl start gitea-podman.service
}

post_backup_processing(){
  sudo -n podman rmi gitea-dump
  sudo -n -u git rm -rf /opt/gitea/dump
}

# Make sure the VM Starts on exit, even if there is a failure
trap start_the_container EXIT

# Execute the backup mechanism
source "${KIT_DIR:?}/base-backup.sh"
