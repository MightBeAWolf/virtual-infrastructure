---
- name: Build any provided containers
  ansible.builtin.include_tasks: build_image.yml
  loop: "{{ podman_pod_build_images if podman_pod_build_images != '' else [] }}"
  loop_control:
    loop_var: podman_pod_image_spec

- name: List pod configuration
  ansible.builtin.debug:
    msg: "{{ podman_pod_spec }}"

- name: Ensure dependencies are installed
  ansible.builtin.package:
    name:
      - podman
      - fuse-overlayfs
      - acl
    state: present
  become: true

- name: Create the Pod
  block:
    - name: Create the Podman Pod
      containers.podman.podman_pod:
        name: "{{ podman_pod_spec.name }}"
        ports: "{{ podman_pod_spec.ports }}"
        state: started
      become: true

    - name: Create the Pod's named volumes
      containers.podman.podman_volume:
        name: "{{ podman_pod_named_volume.name }}"
        state: present
      become: true
      loop: "{{ podman_pod_named_volumes | rejectattr('remote', 'defined') }}"
      loop_control:
        loop_var: podman_pod_named_volume

    - name: Create any remote volumes
      containers.podman.podman_volume:
        name: "{{ podman_pod_remote_volume.name }}"
        state: present
        driver: local
        options:
          - "type=nfs"
          - "o=nolock,hard,rw"
          - "device={{ podman_pod_remote_volume.remote }}"
      become: true
      loop: >-
        {{ podman_pod_named_volumes
          | selectattr('remote', 'defined')
          | list
          | unique(attribute='name')
        }}
      loop_control:
        loop_var: podman_pod_remote_volume

- name: Setup the individual containers
  ansible.builtin.include_tasks: container.yml
  loop: "{{ podman_pod_spec.containers }}"
  loop_control:
    loop_var: podman_pod_container

# - name: Define the Volume Backup Policy Kit
#   block:
#     - name: Create a the backup kit directory
#       ansible.builtin.file:
#         path: /backups/kits/{{ podman_pod_spec.name }}
#         state: directory
#         owner: backupsys
#         group: backupsys
#         mode: '0700'
#       become: true

#     - name: Create the backup scripts from backup_kit
#       ansible.builtin.copy:
#         src: "{{ podman_pod_backup_script }}"
#         dest: "/backups/kits/{{ podman_pod_spec.name }}/{{ podman_pod_backup_script | basename }}"
#         owner: backupsys
#         group: backupsys
#         mode: '0700'
#       with_fileglob:
#         - "backup_kit/*.sh"
#       loop_control:
#         loop_var: podman_pod_backup_script
#       become: true

#     - name: Create the pod's backup script
#       ansible.builtin.template:
#         src: backup_kit/main.sh.j2
#         dest: /backups/kits/{{ podman_pod_spec.name }}/main.sh
#         owner: backupsys
#         group: backupsys
#         mode: '0700'
#       become: true

#     - name: Start the backup timer
#       ansible.builtin.systemd_service:
#         name: "backup-{{ podman_pod_spec.backup.freq | default(podman_pod_default_backup_freq) }}@{{ podman_pod_spec.name }}.timer"
#         state: started
#         enabled: true
#       when: podman_pod_spec.backup is not defined or (podman_pod_spec.backup is defined and podman_pod_spec.backup.freq != 'never')
#       become: true
