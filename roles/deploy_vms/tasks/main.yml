---
- name: Use terraform from the control node
  delegate_to: localhost
  vars:
    build_dir: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/state/terraform/{{ inventory_hostname }}/{{ role_path | basename }}"
    guests: >
      {{ hostvars | dict2items
      | selectattr('value.group_names', 'contains', 'virtual_machines')
      | selectattr('value', 'contains', 'target_host')
      | selectattr('value.target_host', 'in', [inventory_hostname, inventory_hostname_short, proxmox_node_id])
      | items2dict
      }}
  block:
    - name: Create local terraform project directory
      ansible.builtin.file:
        path: "{{ build_dir }}"
        mode: '0700'
        state: directory

    - name: Sync the terraform project configuration files
      ansible.builtin.copy:
        src: "terraform/"
        dest: "{{ build_dir }}"
        mode: 'preserve'

    - name: Initialize the terraform with the project run script
      ansible.builtin.command:
        chdir: "{{ build_dir }}"
        argv:
          - "./run.sh"
          - "init"
        creates: "{{ build_dir }}/terraform.tfstate"
      register: terraform_init

    - name: Apply terraform with the project run script
      ansible.builtin.command:
        chdir: "{{ build_dir }}"
        argv:
          - "./run.sh"
          - "apply"
          - "-var=from_template={{ deploy_vms_template }}"
          - "-var=pm_api_uri={{ api_uri }}"
          - >
            -var=guests={{ guests
              | flatten_to_subitem('guest_info')
              | join_dicts_by_key(guests
                | filter_keys_of_subitems(
                  keep=['target_host', 'ansible_host'],
                  rename=['ansible_host:ipv4']))
              | to_json
            }}
          - "--auto-approve"
      register: terraform_apply
      changed_when: "'Apply complete! Resources: 0 added, 0 changed, 0 destroyed.' not in terraform_apply.stdout"
