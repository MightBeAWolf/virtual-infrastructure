---
- name: deploy_proxmox_cluster | Use terraform from the control node
  delegate_to: localhost
  vars:
    build_dir: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/state/terraform/{{ inventory_hostname }}/{{ role_path | basename }}"
    guest_nodes: >
      {{ hostvars | dict2items
      | selectattr('value.group_names', 'contains', 'kubernetes')
      | selectattr('value', 'contains', 'target_host')
      | selectattr('value.target_host', 'in', [inventory_hostname, inventory_hostname_short])
      | items2dict
      }}
  block:
    - name: deploy_proxmox_cluster | Create local terraform project directory
      ansible.builtin.file:
        path: "{{ build_dir }}"
        mode: '0700'
        state: directory

    - name: deploy_proxmox_cluster |  Sync the terraform project configuration files
      ansible.builtin.copy:
        src: "terraform/"
        dest: "{{ build_dir }}"
        mode: 'preserve'

    - name: deploy_proxmox_cluster |  Initialize the terraform with the project run script
      ansible.builtin.command:
        chdir: "{{ build_dir }}"
        argv:
          - "./run.sh"
          - "init"
        creates: "{{ build_dir }}/terraform.tfstate"
      register: terraform_init

    - name: deploy_proxmox_cluster |  Apply terraform with the project run script
      ansible.builtin.command:
        chdir: "{{ build_dir }}"
        argv:
          - "./run.sh"
          - "apply"
          - "-var=vm_template_name={{ deploy_k3s_vms_template }}"
          - "-var=pm_api_uri={{ api_uri }}"
          - >
            -var=guest_k3s_nodes={{ guest_nodes
              | flatten_to_subitem('guest_info')
              | join_dicts_by_key(guest_nodes | filter_keys_of_subitems(keep=['target_host']))
              | to_json
            }}
          - "--auto-approve"
      register: terraform_apply
      changed_when: "'Apply complete! Resources: 0 added, 0 changed, 0 destroyed.' not in terraform_apply.stdout"
