- name: Create snipeit Configuration
  ansible.builtin.template:
    src: "{{ services_snipeit_config_file.src }}"
    dest: "{{ services_snipeit_config_file.dest }}"
    owner: "{{ services_snipeit_container_name }}"
    group: "{{ services_snipeit_container_name }}"
    mode: '0600'
  loop:
    - src: "snipeit.env.j2"
      dest: "{{ services_snipeit_main_storage }}/snipeit.env"
  loop_control:
    loop_var: services_snipeit_config_file
  register: configs
  become: true

- name: Configure snipeit SSL Certificate and Key
  block:
    - name: Create SSL Certificate Directory
      ansible.builtin.file:
        state: directory
        path: "{{ services_snipeit_main_storage }}/ssl"
        owner: "{{ services_snipeit_container_name }}"
        group: "{{ services_snipeit_container_name }}"
        mode: '0700'
      become: true

    - name: Create private key (RSA, 4096 bits)
      community.crypto.openssl_privatekey:
        path: "{{ services_snipeit_main_storage }}/ssl/snipeit-ssl.key"
        owner: "{{ services_snipeit_container_name }}"
        group: "{{ services_snipeit_container_name }}"
        mode: '0600'
      become: true
      register: ssl_key

    - name: Create certificate signing request (CSR) for self-signed certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ services_snipeit_main_storage }}/ssl/snipeit-ssl.key"
        common_name: '{{ inventory_hostname }}'
        organization_name: Silicon Technologies Inc
        subject_alt_name:
          - "DNS:{{ ansible_host }}"
      register: csr
      changed_when: ssl_key.changed
      become: true

    - name: Create self-signed certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ services_snipeit_main_storage }}/ssl/snipeit-ssl.crt"
        csr_content: "{{ csr.csr }}"
        privatekey_path: "{{ services_snipeit_main_storage }}/ssl/snipeit-ssl.key"
        provider: selfsigned
        owner: "{{ services_snipeit_container_name }}"
        group: "{{ services_snipeit_container_name }}"
        mode: '0600'
      register: sign_cert
      become: true

- name: "Ensure the snipeit services have been started"
  ansible.builtin.systemd:
    name: "{{ services_snipeit_service }}"
    enabled: true
    state: started
  loop:
    - "{{ services_snipeit_container_name }}_db_podman.service"
    - "{{ services_snipeit_container_name }}_podman.service"
  loop_control:
    loop_var: services_snipeit_service
  register: enable_systemd_service
  when: not (configs.changed or ssl_key.changed or sign_cert.changed)
  become: true

- name: "Restart the snipeit services"
  ansible.builtin.systemd:
    name: "{{ services_snipeit_service }}"
    enabled: true
    state: restarted
  loop:
    - "{{ services_snipeit_container_name }}_db_podman.service"
    - "{{ services_snipeit_container_name }}_podman.service"
  loop_control:
    loop_var: services_snipeit_service
  register: restart_systemd_service
  when: configs.changed or ssl_key.changed or sign_cert.changed
  become: true

- name: Pause for 10 seconds for container to come up
  ansible.builtin.pause:
    seconds: 10
  when: enable_systemd_service.changed or restart_systemd_service.changed

- name: Initialize the SnipeIT DB Scheme
  block:
    - name: Install database modification requirements
      ansible.builtin.package:
        name:
          - mariadb-server
          - python3-pymysql
        state: present
      become: true

    - name: Define the database within the mariadb server
      community.mysql.mysql_db:
        name: "{{ services_snipeit_database_name }}"
        state: present
        login_host: 127.0.0.1
        login_user: root
        login_password: "{{ lookup('env', 'SNIPEIT_DB_PASSWORD') }}"

    - name: Define the mariadb user
      community.mysql.mysql_user:
        login_host: 127.0.0.1
        login_user: root
        login_password: "{{ lookup('env', 'SNIPEIT_DB_PASSWORD') }}"
        name: "{{ lookup('env', 'SNIPEIT_DB_USERNAME') }}"
        password: "{{ lookup('env', 'SNIPEIT_DB_PASSWORD') }}"
        host: 127.0.0.1
        priv: "{{ services_snipeit_database_name }}.*:ALL"
        state: present

    - name: Ensure that there is no mariadb service created during the install
      ansible.builtin.systemd_service:
        name: mariadb.service
        enabled: false
        state: stopped
      become: true
